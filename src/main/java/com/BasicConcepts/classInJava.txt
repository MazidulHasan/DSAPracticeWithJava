Class::
    In Java, a class is a blueprint or a template for creating objects. Class is a set of objects which shares common characteristics/ behavior and common properties/ 
    attributes.
    Properties of Java Classes::
        Class is not a real-world entity. It is just a template or blueprint or prototype from which objects are created.
        Class does not occupy memory.
        Class is a group of variables of different data types and a group of methods.
        A Class in Java can contain:
            Data member
            Method
            Constructor
            Nested Class
            Interface
    Modifiers: A class can be public or has default access (Refer this for details).
    Class keyword: class keyword is used to create a class.
    Class name: The name should begin with an initial letter (capitalized by convention).
    Superclass(if any): The name of the classâ€™s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.
    Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.
    Body: The class body is surrounded by braces, { }.



Basic Question and Ans::

What is a class in Java?
A class in Java is a blueprint or template for creating objects. It defines the properties (fields) and behaviors (methods) that objects of the class will have.

Explain the concept of objects and classes in Java.
Objects are instances of classes. A class defines the structure and behavior, and objects are created based on that structure. Objects encapsulate data and behavior 
in a modular and reusable way.

What is the purpose of a constructor in a Java class?
The constructor is a special method used for initializing objects. It is called when an object is created and is used to set initial values for the object's attributes.

Differentiate between a class and an object.
A class is a blueprint or template that defines the properties and behaviors common to all objects of that type. An object is an instance of a class, representing a specific 
instantiation of the class with its own unique state.

How is encapsulation achieved in Java classes?
Encapsulation in Java is achieved by using access modifiers such as private, protected, and public to control access to the class members (fields and methods). It helps hide
the implementation details and ensures data integrity.

What are instance variables and how are they different from class variables?
Instance variables (or member variables) belong to an instance of a class and are unique to each object. Class variables (or static variables) are shared among all instances 
of a class and belong to the class itself.

Explain the significance of the public, private, and protected modifiers in Java classes.
These are access modifiers:
public: Accessible from anywhere.
private: Accessible only within the class.
protected: Accessible within the class and its subclasses.
What is method overloading? Can it be applied to constructors?

Method overloading is the ability to define multiple methods with the same name but different parameters in the same class. Yes, it can be applied to constructors.
How does inheritance work in Java classes?

Inheritance is a mechanism in which a new class inherits the properties and behaviors of an existing class. The new class is called the subclass, and the existing class is the superclass.
What is the super keyword used for in Java classes?

The super keyword is used to refer to the superclass (parent class) members within the subclass. It is often used to call the superclass's methods or access its fields.
Can a class be marked as both abstract and final? Why or why not?

No, a class cannot be both abstract and final. An abstract class is meant to be subclassed, while a final class cannot be subclassed. These concepts contradict each other.
Explain the this keyword in Java and when it is used.

The this keyword refers to the current instance of the class. It is used to differentiate instance variables from local variables when they have the same name. It can also be used to invoke the current object's method.
What is the purpose of the static keyword in Java class members?

The static keyword is used to declare members (fields or methods) that belong to the class rather than instances of the class. Static members are shared among all instances of the class.
How does the final keyword affect a class and its members?

When applied to a class, the final keyword prevents the class from being subclassed. When applied to a method, it prevents the method from being overridden. When applied to a variable, it makes the variable a constant that cannot be reassigned.
Describe the concept of polymorphism in Java classes.

Polymorphism allows objects of different types to be treated as objects of a common type. In Java, polymorphism is achieved through method overloading and method overriding.
What is the difference between composition and inheritance?

Composition is a design technique where a class contains an object of another class, while inheritance is a mechanism where a new class acquires the properties and behaviors of an existing class.
How is method overriding different from method overloading?

Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass. Method overloading involves defining multiple methods with the same name but different parameters in the same class.
Explain the purpose of the interface keyword in Java classes.

An interface in Java is a collection of abstract methods. It allows a class to implement multiple interfaces, providing a way to achieve multiple inheritance.
What is the role of the abstract keyword in Java classes?

The abstract keyword is used to declare abstract classes and methods. An abstract class cannot be instantiated, and it may contain abstract methods (methods without a body) that must be implemented by its subclasses.
How would you implement a singleton pattern in Java?

The singleton pattern ensures that a class has only one instance and provides a global point of access to that instance. This can be achieved by making the class constructor private, providing a static method to access the instance, and lazily initializing the instance.